str(sub.annot)
# Limma model
design <- model.matrix(~ sub.annot$condition + sub.annot$age + sub.annot$gender)
head(design)
colnames(design) <- c('Intercept', 'condition', 'age', 'gender_male')
fit <- lmFit(as.matrix(t(sub.df)), design = design)
fit <- eBayes(fit)
nonICU_vs_ICU <- topTable(fit = fit, adjust.method = "BH", number = Inf, coef = 'condition')
nonICU_vs_ICU$OlinkID <- rownames(nonICU_vs_ICU)
nonICU_vs_ICU$significance <- ifelse(nonICU_vs_ICU$adj.P.Val < 0.05, TRUE, FALSE)
nonICU_vs_ICU$direction <- ifelse(nonICU_vs_ICU$logFC < 0.0, 'Downregulated', 'Upregulated')
nonICU_vs_ICU <- cbind(nonICU_vs_ICU,
conv %>%
filter(OlinkID %in% nonICU_vs_ICU$OlinkID) %>%
arrange(match(OlinkID, nonICU_vs_ICU$OlinkID)) %>%
select(Assay, Uniprot.ID, Olink.panel))
##### MHH healthy vs MHH postcovid
# Different data because we want to include the neurology panel as well
annot.mhh %<>% filter(condition %in% c('healthy', 'postcovid'))
annot.mhh$condition <- factor(annot.mhh$condition, levels = c('healthy', 'postcovid'))
mhh %<>% filter(rownames(mhh) %in% rownames(annot.mhh))
# Limma model
design <- model.matrix(~ annot.mhh$condition + annot.mhh$age + annot.mhh$gender)
head(design)
colnames(design) <- c('Intercept', 'condition', 'age', 'gender_male')
fit <- lmFit(as.matrix(t(mhh)), design = design)
fit <- eBayes(fit)
healthy_vs_postcovid <- topTable(fit = fit, adjust.method = "BH", number = Inf, coef = 'condition')
healthy_vs_postcovid$OlinkID <- rownames(healthy_vs_postcovid)
healthy_vs_postcovid$significance <- ifelse(healthy_vs_postcovid$adj.P.Val < 0.05, TRUE, FALSE)
healthy_vs_postcovid$direction <- ifelse(healthy_vs_postcovid$logFC < 0.0, 'Downregulated', 'Upregulated')
healthy_vs_postcovid <- cbind(healthy_vs_postcovid,
conv %>%
filter(OlinkID %in% healthy_vs_postcovid$OlinkID) %>%
arrange(match(OlinkID, healthy_vs_postcovid$OlinkID)) %>%
select(Assay, Uniprot.ID, Olink.panel))
ggarrange(
ggplot() +
geom_point(data = healthy_vs_ICU %>% filter(significance == F) , aes(x = logFC, y = -log10(adj.P.Val)), color = 'lightgray', show.legend = F) +
geom_point(data = healthy_vs_ICU %>% filter(significance == T) , aes(x = logFC, y = -log10(adj.P.Val), color = direction)) +
labs(x = expression(paste(log[2], ' fold change')), y = expression(paste(-log[10], '(adj. p-value)')), color = '', title = 'ICU vs healthy') +
scale_color_manual(values = c('#0072B5FF', '#BC3C29FF')) +
geom_hline(yintercept = -log10(0.05), lty = 'dotted') +
geom_vline(xintercept = 0.0, lty = 'dotted') +
xlim(c(-5, 6)) +
ylim(c(0, 90)) +
ggrepel::geom_label_repel(data = head(x = healthy_vs_ICU, 25), aes(label = Assay, x = logFC, y = -log10(adj.P.Val)), box.padding = 0.5, show.legend = F,max.overlaps = n),
ggplot() +
geom_point(data = healthy_vs_nonICU %>% filter(significance == F) , aes(x = logFC, y = -log10(adj.P.Val)), color = 'lightgray', show.legend = F) +
geom_point(data = healthy_vs_nonICU %>% filter(significance == T) , aes(x = logFC, y = -log10(adj.P.Val), color = direction)) +
labs(x = expression(paste(log[2], ' fold change')), y = expression(paste(-log[10], '(adj. p-value)')), color = '', title = 'non-ICU vs healthy') +
scale_color_manual(values = c('#0072B5FF', '#BC3C29FF')) +
geom_hline(yintercept = -log10(0.05), lty = 'dotted') +
geom_vline(xintercept = 0.0, lty = 'dotted') +
xlim(c(-5, 6)) +
ylim(c(0, 90)) +
ggrepel::geom_label_repel(data = head(x = healthy_vs_nonICU, 25), aes(label = Assay, x = logFC, y = -log10(adj.P.Val)), box.padding = 0.5, show.legend = F, max.overlaps = n),
ggplot() +
geom_point(data = healthy_vs_postcovid %>% filter(significance == F) , aes(x = logFC, y = -log10(adj.P.Val)), color = 'lightgray', show.legend = F) +
geom_point(data = healthy_vs_postcovid %>% filter(significance == T) , aes(x = logFC, y = -log10(adj.P.Val), color = direction)) +
labs(x = expression(paste(log[2], ' fold change')), y = expression(paste(-log[10], '(adj. p-value)')), color = '', title = 'post-COVID-19 vs healthy') +
scale_color_manual(values = c('#0072B5FF', '#BC3C29FF')) +
geom_hline(yintercept = -log10(0.05), lty = 'dotted') +
geom_vline(xintercept = 0.0, lty = 'dotted') +
xlim(c(-5, 6)) +
ylim(c(0, 90)) +
ggrepel::geom_label_repel(data = head(x = healthy_vs_postcovid, 5), aes(label = Assay, x = logFC, y = -log10(adj.P.Val)), box.padding = 0.5, show.legend = F, max.overlaps = n),
ncol = 3, nrow = 1, common.legend = T, legend =  'right'
)
# Volcano plots for all comparisons
theme_set(theme_classic() + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 12)))
n = 13
pdf('output/volcano_DE_radboud.pdf', width = 15, height = 4, onefile = F)
ggarrange(
ggplot() +
geom_point(data = healthy_vs_ICU %>% filter(significance == F) , aes(x = logFC, y = -log10(adj.P.Val)), color = 'lightgray', show.legend = F) +
geom_point(data = healthy_vs_ICU %>% filter(significance == T) , aes(x = logFC, y = -log10(adj.P.Val), color = direction)) +
labs(x = expression(paste(log[2], ' fold change')), y = expression(paste(-log[10], '(adj. p-value)')), color = '', title = 'ICU vs healthy') +
scale_color_manual(values = c('#0072B5FF', '#BC3C29FF')) +
geom_hline(yintercept = -log10(0.05), lty = 'dotted') +
geom_vline(xintercept = 0.0, lty = 'dotted') +
xlim(c(-5, 6)) +
ylim(c(0, 90)) +
ggrepel::geom_label_repel(data = head(x = healthy_vs_ICU, 25), aes(label = Assay, x = logFC, y = -log10(adj.P.Val)), box.padding = 0.5, show.legend = F,max.overlaps = n),
ggplot() +
geom_point(data = healthy_vs_nonICU %>% filter(significance == F) , aes(x = logFC, y = -log10(adj.P.Val)), color = 'lightgray', show.legend = F) +
geom_point(data = healthy_vs_nonICU %>% filter(significance == T) , aes(x = logFC, y = -log10(adj.P.Val), color = direction)) +
labs(x = expression(paste(log[2], ' fold change')), y = expression(paste(-log[10], '(adj. p-value)')), color = '', title = 'non-ICU vs healthy') +
scale_color_manual(values = c('#0072B5FF', '#BC3C29FF')) +
geom_hline(yintercept = -log10(0.05), lty = 'dotted') +
geom_vline(xintercept = 0.0, lty = 'dotted') +
xlim(c(-5, 6)) +
ylim(c(0, 90)) +
ggrepel::geom_label_repel(data = head(x = healthy_vs_nonICU, 25), aes(label = Assay, x = logFC, y = -log10(adj.P.Val)), box.padding = 0.5, show.legend = F, max.overlaps = n),
ggplot() +
geom_point(data = healthy_vs_postcovid %>% filter(significance == F) , aes(x = logFC, y = -log10(adj.P.Val)), color = 'lightgray', show.legend = F) +
geom_point(data = healthy_vs_postcovid %>% filter(significance == T) , aes(x = logFC, y = -log10(adj.P.Val), color = direction)) +
labs(x = expression(paste(log[2], ' fold change')), y = expression(paste(-log[10], '(adj. p-value)')), color = '', title = 'post-COVID-19 vs healthy') +
scale_color_manual(values = c('#0072B5FF', '#BC3C29FF')) +
geom_hline(yintercept = -log10(0.05), lty = 'dotted') +
geom_vline(xintercept = 0.0, lty = 'dotted') +
xlim(c(-5, 6)) +
ylim(c(0, 90)) +
ggrepel::geom_label_repel(data = head(x = healthy_vs_postcovid, 5), aes(label = Assay, x = logFC, y = -log10(adj.P.Val)), box.padding = 0.5, show.legend = F, max.overlaps = n),
ncol = 3, nrow = 1, common.legend = T, legend =  'right'
)
dev.off()
rm(list = ls())
try(dev.off())
load('data/data.RData')
library(dplyr)
library(magrittr)
library(ggplot2)
library(ggsci)
library(RColorBrewer)
library(openxlsx)
library(pheatmap)
# Define the colours we want to use for ICU, non-ICU, postcovid and healthy
cols <- c('ICU' = '#BC3C29FF', 'non-ICU' = '#E18727FF', 'post-COVID-19' = '#0072B5FF', 'healthy' = '#1fc600')
theme_set(theme_classic() + theme(text = element_text(size = 12)))
# annot radboud unique patients
annot.radboud %<>% filter(time == 'W1T1')
df <- rbind(annot.mhh %>% select(age, gender, condition),
annot.radboud %>% select(age, gender, condition))
common <- intersect(colnames(mhh), colnames(radboud))
annot.radboud %<>% filter(time == 'W1T1')
df <- rbind(
mhh %>% select(all_of(common)),
radboud %>% select(all_of(common))
)
annot <- rbind(
annot.mhh %>% select(all_of(c('age', 'gender', 'condition'))),
annot.radboud %>% select(all_of(c('age', 'gender', 'condition')))
)
df <- na.omit(df)
annot <- annot[which(rownames(annot) %in% rownames(df)), ]
annot <- na.omit(annot)
df <- df[which(rownames(df) %in% rownames(annot)), ]
annot$condition[which(annot$condition == 'postcovid')] <- 'post-COVID-19'
annot$condition
annot$condition <- factor(annot$condition, levels = c('ICU', 'non-ICU', 'post-COVID-19', 'healthy'))
annot %<>% arrange(condition)
df %<>% arrange(match(rownames(df), rownames(annot)))
all(rownames(df) == rownames(annot))
# PCA using these samples
pca.res <- prcomp(df, center = T, scale. = T)
summary(pca.res)
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
pdf('output/pca_figure_1.pdf', width = 6, height = 4)
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
dev.off()
# Retrieve the healthy / postcovid samples and run PCA again
annot %<>% filter(condition %in% c('post-COVID-19', 'healthy'))
df <- df[which(rownames(df) %in% rownames(annot)), ]
pca.res <- prcomp(df, center = T, scale. = T)
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [18.6%]', y = 'PC2 [8.6%]', color = 'Condition') +
theme(legend.position = 'none')
pdf('output/pca_healthy_postcovid.pdf', width = 6, height = 4)
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [18.6%]', y = 'PC2 [8.6%]', color = 'Condition') +
theme(legend.position = 'none')
dev.off()
# Heatmap of the differentially expressed genes
load('data/data.RData')
DE <- unique(c(
read.xlsx('output/biomarkers.xlsx', sheet = 'ICU', colNames=F) %>% pull(X1),
read.xlsx('output/biomarkers.xlsx', sheet = 'nonICU', colNames=F) %>% pull(X1),
read.xlsx('output/biomarkers.xlsx', sheet = 'postcovid', colNames=F) %>% pull(X1)
))
df %<>% select(all_of(DE))
df
annot
ph <- pheatmap(mat = t(df),
scale = 'row',
show_colnames = F,
cluster_cols = F,
annotation_col = annot %>% select(condition),
breaks = seq(-2, 2, length.out = 100),
show_rownames = T,
annotation_colors = list(condition = cols),
annotation_names_col = F,
fontsize = 8,
color = x,
cutree_rows = 4)
x <- colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100)
ph <- pheatmap(mat = t(df),
scale = 'row',
show_colnames = F,
cluster_cols = F,
annotation_col = annot %>% select(condition),
breaks = seq(-2, 2, length.out = 100),
show_rownames = T,
annotation_colors = list(condition = cols),
annotation_names_col = F,
fontsize = 8,
color = x,
cutree_rows = 4)
rm(list = ls())
try(dev.off())
load('data/data.RData')
library(dplyr)
library(magrittr)
library(ggplot2)
library(ggsci)
library(RColorBrewer)
library(openxlsx)
library(pheatmap)
# Define the colours we want to use for ICU, non-ICU, postcovid and healthy
cols <- c('ICU' = '#BC3C29FF', 'non-ICU' = '#E18727FF', 'post-COVID-19' = '#0072B5FF', 'healthy' = '#1fc600')
theme_set(theme_classic() + theme(text = element_text(size = 12)))
# annot radboud unique patients
annot.radboud %<>% filter(time == 'W1T1')
df <- rbind(annot.mhh %>% select(age, gender, condition),
annot.radboud %>% select(age, gender, condition))
# Heatmap over Radboud and MHH cohorts
common <- intersect(colnames(mhh), colnames(radboud))
annot.radboud %<>% filter(time == 'W1T1')
df <- rbind(
mhh %>% select(all_of(common)),
radboud %>% select(all_of(common))
)
annot <- rbind(
annot.mhh %>% select(all_of(c('age', 'gender', 'condition'))),
annot.radboud %>% select(all_of(c('age', 'gender', 'condition')))
)
df <- na.omit(df)
annot <- annot[which(rownames(annot) %in% rownames(df)), ]
annot <- na.omit(annot)
df <- df[which(rownames(df) %in% rownames(annot)), ]
annot$condition[which(annot$condition == 'postcovid')] <- 'post-COVID-19'
annot$condition <- factor(annot$condition, levels = c('ICU', 'non-ICU', 'post-COVID-19', 'healthy'))
annot %<>% arrange(condition)
df %<>% arrange(match(rownames(df), rownames(annot)))
all(rownames(df) == rownames(annot))
x <- colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100)
# Heatmap of the differentially expressed genes
load('data/data.RData')
DE <- unique(c(
read.xlsx('output/biomarkers.xlsx', sheet = 'ICU', colNames=F) %>% pull(X1),
read.xlsx('output/biomarkers.xlsx', sheet = 'nonICU', colNames=F) %>% pull(X1),
read.xlsx('output/biomarkers.xlsx', sheet = 'postcovid', colNames=F) %>% pull(X1)
))
df %<>% select(all_of(DE))
ph <- pheatmap(mat = t(df),
scale = 'row',
show_colnames = F,
cluster_cols = F,
annotation_col = annot %>% select(condition),
breaks = seq(-2, 2, length.out = 100),
show_rownames = T,
annotation_colors = list(condition = cols),
annotation_names_col = F,
fontsize = 8,
color = x,
cutree_rows = 4)
dev.off()
pdf('output/heatmap_figure_1.pdf', width = 8, height = 4)
ph <- pheatmap(mat = t(df),
scale = 'row',
show_colnames = F,
cluster_cols = F,
annotation_col = annot %>% select(condition),
breaks = seq(-2, 2, length.out = 100),
show_rownames = T,
annotation_colors = list(condition = cols),
annotation_names_col = F,
fontsize = 8,
color = x,
cutree_rows = 4)
dev.off()
pdf('output/heatmap_figure_1.pdf', width = 8, height = 4)
ph <- pheatmap(mat = t(df),
scale = 'row',
show_colnames = F,
cluster_cols = F,
annotation_col = annot %>% select(condition),
breaks = seq(-2, 2, length.out = 100),
show_rownames = F,
annotation_colors = list(condition = cols),
annotation_names_col = F,
fontsize = 8,
color = x,
cutree_rows = 4)
dev.off()
?save
rm(list = ls())
dev.off()
library(pheatmap)
library(reshape2)
library(dplyr)
library(magrittr)
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
library(Hmisc)
library(igraph)
library(RCy3)
###################
### Load data and setup
###################
setwd('/Users/martijnzoodsma/Documents/PhD/corona/Postcovid-targeted-proteomics/')
load('data/data.RData')
# Contruct entire df and annot
annot <- rbind(
annot.mhh %>% select(age, gender, condition, cohort),
annot.radboud %>% select(age, gender, condition, cohort)
)
df <- rbind(
mhh %>% select(intersect(colnames(mhh), colnames(radboud))),
radboud %>% select(intersect(colnames(mhh), colnames(radboud)))
)
df <- na.omit(df)
annot <- na.omit(annot)
df %<>% filter(rownames(df) %in% intersect(rownames(df), rownames(annot)))
annot %<>% filter(rownames(annot) %in% intersect(rownames(annot), rownames(df)))
annot %<>% arrange(match(rownames(annot), rownames(df)))
all(rownames(annot) == rownames(df))
#####################
# Split in four conditions and determine clustering order for the four conditions
#####################
annot$condition[which(annot$condition == 'postcovid')] <- 'post-COVID-19'
annot.ICU <- annot %>% filter(condition == 'ICU')
annot.nonICU <- annot %>% filter(condition == 'non-ICU')
annot.postcovid <- annot %>% filter(condition == 'post-COVID-19')
annot.healthy <- annot %>% filter(condition == 'healthy')
df.ICU <- df[which(rownames(df) %in% rownames(annot.ICU)), ]
df.nonICU <- df[which(rownames(df) %in% rownames(annot.nonICU)), ]
df.postcovid <- df[which(rownames(df) %in% rownames(annot.postcovid)), ]
df.healthy <- df[which(rownames(df) %in% rownames(annot.healthy)), ]
cor.df.ICU <- cor(df.ICU, method = 'pearson')
cor.df.nonICU <- cor(df.nonICU, method = 'pearson')
cor.df.postcovid <- cor(df.postcovid, method = 'pearson')
cor.df.healthy <- cor(df.healthy, method = 'pearson')
ord.ICU <- pheatmap(cor.df.ICU)$tree_row$order
ord.nonICU <- pheatmap(cor.df.nonICU)$tree_row$order
ord.postcovid <- pheatmap(cor.df.postcovid)$tree_row$order
ord.healthy <- pheatmap(cor.df.healthy)$tree_row$order
dev.off()
do.heatmap <- function(cor.df.ICU, cor.df.nonICU, cor.df.postcovid, cor.df.healthy, ord, legend) {
cor.df.ICU <- cor.df.ICU[ord, ord]
cor.df.nonICU <- cor.df.nonICU[ord, ord]
cor.df.postcovid <- cor.df.postcovid[ord, ord]
cor.df.healthy <- cor.df.healthy[ord, ord]
# Set lower triangles including diagonal to NA and remove these rows
cor.df.ICU[upper.tri(cor.df.ICU, diag = T)] <- NA
cor.df.ICU.melt <- na.omit(melt(cor.df.ICU))
cor.df.nonICU[upper.tri(cor.df.nonICU, diag = T)] <- NA
cor.df.nonICU.melt <- na.omit(melt(cor.df.nonICU))
cor.df.postcovid[upper.tri(cor.df.postcovid, diag = T)] <- NA
cor.df.postcovid.melt <- na.omit(melt(cor.df.postcovid))
cor.df.healthy[upper.tri(cor.df.healthy, diag = T)] <- NA
cor.df.healthy.melt <- na.omit(melt(cor.df.healthy))
stopifnot(all(cor.df.ICU.melt$Var1 == cor.df.nonICU.melt$Var1))
stopifnot(all(cor.df.ICU.melt$Var2 == cor.df.nonICU.melt$Var2))
stopifnot(all(cor.df.ICU.melt$Var1 == cor.df.postcovid.melt$Var1))
stopifnot(all(cor.df.ICU.melt$Var2 == cor.df.postcovid.melt$Var2))
stopifnot(all(cor.df.ICU.melt$Var1 == cor.df.healthy.melt$Var1))
stopifnot(all(cor.df.ICU.melt$Var2 == cor.df.healthy.melt$Var2))
lims = c(-0.5, 0.5)
colours = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100)
theme_set(theme_classic() +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5)))
p <- ggarrange(
ggplot() +
geom_tile(data = cor.df.ICU.melt, aes(Var2, Var1, fill = value)) +
labs(x = 'Proteins', y = 'Proteins', title = 'COVID-19 ICU', fill = 'Correlation') +
scale_fill_gradientn(colours = colours, limits = lims, oob = scales::squish),
ggplot() +
geom_tile(data = cor.df.nonICU.melt, aes(Var2, Var1, fill = value)) +
labs(x = 'Proteins', y = 'Proteins', title = 'COVID-19 non-ICU', fill = 'Correlation') +
scale_fill_gradientn(colours = colours, limits = lims, oob = scales::squish),
ggplot() +
geom_tile(data = cor.df.postcovid.melt, aes(Var2, Var1, fill = value)) +
labs(x = 'Proteins', y = 'Proteins', title = 'post-COVID-19', fill = 'Correlation') +
scale_fill_gradientn(colours = colours, limits = lims, oob = scales::squish),
ggplot() +
geom_tile(data = cor.df.healthy.melt, aes(Var2, Var1, fill = value)) +
labs(x = 'Proteins', y = 'Proteins', title = 'Healthy', fill = 'Correlation') +
scale_fill_gradientn(colours = colours, limits = lims, oob = scales::squish),
nrow = 1, ncol = 4, common.legend = T, legend = legend
)
return(p)
}
p1 <- do.heatmap(cor.df.ICU = cor.df.ICU,
cor.df.nonICU = cor.df.nonICU,
cor.df.postcovid = cor.df.postcovid,
cor.df.healthy = cor.df.healthy,
ord = ord.ICU, legend = 'none')
p1
dev.off()
p1 <- do.heatmap(cor.df.ICU = cor.df.ICU,
cor.df.nonICU = cor.df.nonICU,
cor.df.postcovid = cor.df.postcovid,
cor.df.healthy = cor.df.healthy,
ord = ord.ICU, legend = 'none')
p2 <- do.heatmap(cor.df.ICU = cor.df.ICU,
cor.df.nonICU = cor.df.nonICU,
cor.df.postcovid = cor.df.postcovid,
cor.df.healthy = cor.df.healthy,
ord = ord.nonICU, legend = 'none')
p3 <- do.heatmap(cor.df.ICU = cor.df.ICU,
cor.df.nonICU = cor.df.nonICU,
cor.df.postcovid = cor.df.postcovid,
cor.df.healthy = cor.df.healthy,
ord = ord.postcovid, legend = 'none')
p4 <- do.heatmap(cor.df.ICU = cor.df.ICU,
cor.df.nonICU = cor.df.nonICU,
cor.df.postcovid = cor.df.postcovid,
cor.df.healthy = cor.df.healthy,
ord = ord.healthy, legend = 'none')
# Empty plot we use just for creation of the legend grob
legend.grob <- get_legend(ggplot() +
geom_point(data = melt(cor.df.ICU),
aes(Var1, Var2, fill = value)) +
scale_fill_gradientn(colours = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
limits = c(-0.5, 0.5), breaks = c(-0.5, 0.0, 0.5)) +
theme(legend.position="bottom") +
labs(fill = 'Correlation'))
pdf('output/heatmaps_combined.pdf', width = 8, height = 8)
ggarrange(p1, p2, p3, p4, ncol = 1, nrow = 4, legend.grob = legend.grob, legend = 'bottom')
dev.off()
rm(list = ls())
try(dev.off())
load('data/data.RData')
library(dplyr)
library(magrittr)
library(ggplot2)
library(ggsci)
library(RColorBrewer)
library(openxlsx)
library(pheatmap)
# Define the colours we want to use for ICU, non-ICU, postcovid and healthy
cols <- c('ICU' = '#BC3C29FF', 'non-ICU' = '#E18727FF', 'post-COVID-19' = '#0072B5FF', 'healthy' = '#1fc600')
theme_set(theme_classic() + theme(text = element_text(size = 12)))
# annot radboud unique patients
annot.radboud %<>% filter(time == 'W1T1')
df <- rbind(annot.mhh %>% select(age, gender, condition),
annot.radboud %>% select(age, gender, condition))
# Heatmap over Radboud and MHH cohorts
common <- intersect(colnames(mhh), colnames(radboud))
annot.radboud %<>% filter(time == 'W1T1')
df <- rbind(
mhh %>% select(all_of(common)),
radboud %>% select(all_of(common))
)
annot <- rbind(
annot.mhh %>% select(all_of(c('age', 'gender', 'condition'))),
annot.radboud %>% select(all_of(c('age', 'gender', 'condition')))
)
df <- na.omit(df)
annot <- annot[which(rownames(annot) %in% rownames(df)), ]
annot <- na.omit(annot)
df <- df[which(rownames(df) %in% rownames(annot)), ]
annot$condition[which(annot$condition == 'postcovid')] <- 'post-COVID-19'
annot$condition <- factor(annot$condition, levels = c('ICU', 'non-ICU', 'post-COVID-19', 'healthy'))
annot %<>% arrange(condition)
df %<>% arrange(match(rownames(df), rownames(annot)))
all(rownames(df) == rownames(annot))
# PCA using these samples
pca.res <- prcomp(df, center = T, scale. = T)
summary(pca.res)
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
annot %<>% filter(condition %in% c('post-COVID-19', 'healthy'))
df <- df[which(rownames(df) %in% rownames(annot)), ]
pca.res <- prcomp(df, center = T, scale. = T)
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [18.6%]', y = 'PC2 [8.6%]', color = 'Condition') +
theme(legend.position = 'none')
head(annot)
head(annot.mhh)
annot$time <- NA
annot[which(rownames(annot) %in% rownames(annot.mhh)), 'time']
annot[which(rownames(annot) %in% rownames(annot.mhh)), 'time'] <- annot.mhh$time.convalescence
annot.mhh <- annot.mhh[which(rownames(annot.mhh) %in% rownames(annot)), ]
annot[which(rownames(annot) %in% rownames(annot.mhh)), 'time'] <- annot.mhh$time.convalescence
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$time)) +
scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
head(annot)
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, fill = annot$time)) +
# scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$time)) +
# scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
ggplot(data = data.frame(pca.res$x)) +
geom_point(aes(x = PC1, y = PC2, color = annot$condition)) +
# scale_color_manual(values = cols) + labs(x = 'PC1 [28.31%]', y = 'PC2 [10.62]', color = 'Condition') +
theme(legend.position = 'top')
